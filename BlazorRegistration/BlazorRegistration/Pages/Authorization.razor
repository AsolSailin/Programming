@page "/authorization"

<PageTitle>Authorization</PageTitle>

@using BlazorRegistration.Data
@using BlazorRegistration.Services
@inject DataBase dataBase
@inject IJSRuntime JS
@inject ILocalStorageService localStorageService

<h1>Authorization</h1>

<EditForm Model="@user" OnValidSubmit="@LogIn" class="mx-1 mx-md-4">

    <p>Login:</p>
    <input type="" id="Login" @bind-value="@user.Login"/>
    <p>Password:</p>
    <input type="password" id="Password" @bind-value="@user.Password"/><br/><br/>


    @if (loading)
    {
        <input class="btn btn-primary btn-lg" value="Loading..." />
    }
    else
    {
        <input type="submit" class="btn btn-primary btn-lg" value="Log In"/>
    }

    @if (dataBase.CurrentUser is not null)
    {
        <p>Surname: @dataBase.CurrentUser.Surname</p>
        <p>Name: @dataBase.CurrentUser.Name</p>
    }
    
</EditForm>

@code {
    private User user = new User();
    public bool loading = false;

    public async Task LogIn()
    {
        if (user.Login != null && user.Password != null)
        {
            loading = true;
            dataBase.CurrentUser = await dataBase.FindByLoginAsync(user.Login);
            loading = false;
            if (dataBase.CurrentUser != null)
            {
                localStorageService.SetAsync<User>("Authorization", dataBase.CurrentUser);
                JS.InvokeVoidAsync("alert", "Authorization was successful");
            }
            else
            {
                JS.InvokeVoidAsync("alert", "There is no such user in the database");
            }
        }
    }
}