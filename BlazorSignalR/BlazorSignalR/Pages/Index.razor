@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Index</PageTitle>

<div>
    Mail:<br />
    <input id="userName" type="text" @bind="mailInput" /><br /><br />
    Name:<br />
    <input id="userName" type="text" @bind="userInput" /><br /><br />
    Message:<br />
    <input type="text" id="message" @bind="messageInput" /><br /><br />
    <button @onclick="Send" disabled="@(!IsConnected)">Send</button>
</div>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;
    private string? mailInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("https://localhost:7007/chat"))
            .Build();

        hubConnection.On<string, string, string>("Receive", (message, user, mail) =>
        {
            var encodedMsg = $"{mail} {user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("Send", messageInput, userInput, mailInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}